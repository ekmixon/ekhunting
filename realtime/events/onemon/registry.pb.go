// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package onemon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegistryKind int32

const (
	RegistryKind_CreateKey             RegistryKind = 0
	RegistryKind_CreateKeyEx           RegistryKind = 1
	RegistryKind_DeleteKey             RegistryKind = 2
	RegistryKind_EnumerateKey          RegistryKind = 3
	RegistryKind_EnumerateValueKey     RegistryKind = 4
	RegistryKind_FlushKey              RegistryKind = 5
	RegistryKind_KeyHandleClose        RegistryKind = 6
	RegistryKind_LoadKey               RegistryKind = 7
	RegistryKind_OpenKey               RegistryKind = 8
	RegistryKind_OpenKeyEx             RegistryKind = 9
	RegistryKind_QueryKey              RegistryKind = 10
	RegistryKind_QueryKeySecurity      RegistryKind = 11
	RegistryKind_QueryMultipleValueKey RegistryKind = 12
	RegistryKind_QueryValueKey         RegistryKind = 13
	RegistryKind_RenameKey             RegistryKind = 14
	RegistryKind_SetInformationKey     RegistryKind = 15
	RegistryKind_SetKeySecurity        RegistryKind = 16
	RegistryKind_UnloadKey             RegistryKind = 17
	RegistryKind_DeleteValueKey        RegistryKind = 18
	RegistryKind_SetValueKeyInt        RegistryKind = 19
	RegistryKind_SetValueKeyStr        RegistryKind = 20
	RegistryKind_SetValueKeyDat        RegistryKind = 21
)

var RegistryKind_name = map[int32]string{
	0:  "CreateKey",
	1:  "CreateKeyEx",
	2:  "DeleteKey",
	3:  "EnumerateKey",
	4:  "EnumerateValueKey",
	5:  "FlushKey",
	6:  "KeyHandleClose",
	7:  "LoadKey",
	8:  "OpenKey",
	9:  "OpenKeyEx",
	10: "QueryKey",
	11: "QueryKeySecurity",
	12: "QueryMultipleValueKey",
	13: "QueryValueKey",
	14: "RenameKey",
	15: "SetInformationKey",
	16: "SetKeySecurity",
	17: "UnloadKey",
	18: "DeleteValueKey",
	19: "SetValueKeyInt",
	20: "SetValueKeyStr",
	21: "SetValueKeyDat",
}
var RegistryKind_value = map[string]int32{
	"CreateKey":             0,
	"CreateKeyEx":           1,
	"DeleteKey":             2,
	"EnumerateKey":          3,
	"EnumerateValueKey":     4,
	"FlushKey":              5,
	"KeyHandleClose":        6,
	"LoadKey":               7,
	"OpenKey":               8,
	"OpenKeyEx":             9,
	"QueryKey":              10,
	"QueryKeySecurity":      11,
	"QueryMultipleValueKey": 12,
	"QueryValueKey":         13,
	"RenameKey":             14,
	"SetInformationKey":     15,
	"SetKeySecurity":        16,
	"UnloadKey":             17,
	"DeleteValueKey":        18,
	"SetValueKeyInt":        19,
	"SetValueKeyStr":        20,
	"SetValueKeyDat":        21,
}

func (x RegistryKind) String() string {
	return proto.EnumName(RegistryKind_name, int32(x))
}
func (RegistryKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

// ID: 2
type Registry struct {
	Ts     uint32       `protobuf:"varint,8,opt,name=ts" json:"ts,omitempty"`
	Pid    uint64       `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Kind   RegistryKind `protobuf:"varint,2,opt,name=kind,enum=onemon.RegistryKind" json:"kind,omitempty"`
	Status uint32       `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	Path   string       `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Valuei uint64       `protobuf:"varint,5,opt,name=valuei" json:"valuei,omitempty"`
	Values string       `protobuf:"bytes,6,opt,name=values" json:"values,omitempty"`
	Valued []byte       `protobuf:"bytes,7,opt,name=valued,proto3" json:"valued,omitempty"`
}

func (m *Registry) Reset()                    { *m = Registry{} }
func (m *Registry) String() string            { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()               {}
func (*Registry) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *Registry) GetTs() uint32 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Registry) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Registry) GetKind() RegistryKind {
	if m != nil {
		return m.Kind
	}
	return RegistryKind_CreateKey
}

func (m *Registry) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Registry) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Registry) GetValuei() uint64 {
	if m != nil {
		return m.Valuei
	}
	return 0
}

func (m *Registry) GetValues() string {
	if m != nil {
		return m.Values
	}
	return ""
}

func (m *Registry) GetValued() []byte {
	if m != nil {
		return m.Valued
	}
	return nil
}

func init() {
	proto.RegisterType((*Registry)(nil), "onemon.Registry")
	proto.RegisterEnum("onemon.RegistryKind", RegistryKind_name, RegistryKind_value)
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
}